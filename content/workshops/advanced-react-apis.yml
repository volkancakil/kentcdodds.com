title: Advanced React APIs
description: >-
  Learn to master a set of advanced React APIs and hooks that you won't use
  daily but are essential for solving specific challenging scenarios in your
  React applications.
meta:
  keywords:
    - react
    - advanced react
    - react hooks
categories:
  - react
kitTag: '896448'
problemStatements:
  part1:
    Managing complex component state with basic hooks like useState can quickly
    become unwieldy.
  part2:
    Creating shared logic across components without causing unnecessary
    re-renders can be tricky.
  part3:
    Sometimes React's declarative approach isn't enough, and we need escape
    hatches to handle imperative tasks.
  part4:
    You need advanced techniques like portals to work with complex UIs that need
    to render outside the component tree.
keyTakeaways:
  - title: Manage Complex State with `useReducer`
    description:
      Learn how `useReducer` can help you consolidate and manage complex state
      logic in a clean, maintainable way.
  - title: Share State Across Components with Context
    description:
      Discover how Reactâ€™s Context API can expose shared state across your
      application without prop drilling.
  - title: Control Imperative Logic with `useImperativeHandle`
    description:
      When React's declarative approach doesn't cut it, you'll learn how to use
      `useImperativeHandle` for imperative control.
  - title: Render Outside the Tree with `createPortal`
    description:
      Explore how portals can help you render UI elements like modals or
      tooltips outside of the normal DOM hierarchy.
  - title: Sync React with External State
    description:
      Learn how to keep React in sync with external data sources using
      `useSyncExternalStore` and ensure server rendering works as expected.
topics:
  - Dive into `useReducer` for managing complex component state
  - Use Context and `createContext` to share values without prop drilling
  - Build more flexible UIs with `createPortal` for rendering elements outside
    of the DOM tree
  - Handle layout-related side effects using `useLayoutEffect` for better UI
    consistency
  - Expose imperative actions to parent components with `useImperativeHandle`
  - Manage focus and synchronization issues with `flushSync` to optimize user
    experience
  - Sync React with external data sources using `useSyncExternalStore` and
    handle server rendering use-cases

prerequisite: >-
  You should be comfortable with React hooks (`useState`, `useEffect`,
  `useContext`) and have experience building reusable components and hooks.
